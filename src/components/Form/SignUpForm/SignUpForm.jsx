import React, { useEffect } from 'react'
import { NavLink, useNavigate } from 'react-router-dom'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'

import { useDispatch, useSelector } from 'react-redux'
import { fetchSignUp, selectErrors, selectState, selectUser } from '../../../redux/slices/authFormSlice'

import styles from './SignUpForm.module.scss'
import { showSuccessToast } from '../../../utils/toastify'
import { signUpFormSchema } from '../../../validation/yupSchemas'

// const schema = yup.object().shape({
//   username: yup
//     .string()
//     .required('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
//     .matches(/^[a-zA-Z0-9]+$/, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã'),
//   email: yup.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π email').required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
//   // .matches(/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/, 'Email must be in lowercase letters only'),
//   password: yup
//     .string()
//     .min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
//     .max(40, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤')
//     .matches(/\S/, '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤')
//     .required('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
//   repeatPassword: yup
//     .string()
//     .oneOf([yup.ref('password'), null], '–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å')
//     .required('–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
//   agreeCheckbox: yup.boolean().oneOf([true], '–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏'),
// })

function SignUpForm() {
  const errorsFromServer = useSelector(selectErrors)
  console.log(errorsFromServer)
  const user = useSelector(selectUser)
  // const { user } = useSelector(selectState)
  const navigate = useNavigate()
  // console.log(test)
  const dispatch = useDispatch()

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors, isValid },
  } = useForm({
    resolver: yupResolver(signUpFormSchema),
    mode: 'onTouched', // –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  })

  const submitForm = (data) => {
    const { username, email, password } = data
    // console.log(data)
    console.log({ username, email, password })
    dispatch(fetchSignUp({ username, email, password }))
  }

  useEffect(() => {
    if (user) {
      showSuccessToast('ü¶Ñ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏  –∞–∫–∫–∞—É–Ω—Ç!')

      navigate('/')
    }
  }, [user, navigate])

  const handleEmailInput = (e) => {
    const lowerCaseEmail = e.target.value.toLowerCase()
    setValue('email', lowerCaseEmail, { shouldValidate: true }) // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
  }

  return (
    <div>
      <h2 className={styles.signUpTitle}>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h2>
      <form className={styles.signUpForm} onSubmit={handleSubmit(submitForm)}>
        <label className={styles.signUpLabel}>
          –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          <input
            className={`${styles.signUpInput} ${errors.username ? styles.inputError : ''}`}
            name="username"
            type="text"
            placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            {...register('username')}
          />
          <p className={styles.errorText}>{errors.username?.message}</p>
        </label>

        <label className={styles.signUpLabel}>
          Email –∞–¥—Ä–µ—Å
          <input
            className={`${styles.signUpInput} ${errors.email ? styles.inputError : ''}`}
            name="email"
            type="text"
            placeholder="Email –∞–¥—Ä–µ—Å"
            onInput={handleEmailInput}
            {...register('email')}
          />
          <p className={styles.errorText}>{errors.email?.message}</p>
        </label>

        <label className={styles.signUpLabel}>
          –ü–∞—Ä–æ–ª—å
          <input
            className={`${styles.signUpInput} ${errors.password ? styles.inputError : ''}`}
            name="password"
            type="password"
            placeholder="******"
            {...register('password')}
          />
          <p className={styles.errorText}>{errors.password?.message}</p>
        </label>

        <label className={styles.signUpLabel}>
          –ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è
          <input
            className={`${styles.signUpInput} ${errors.repeatPassword ? styles.inputError : ''}`}
            name="repeatPassword"
            type="password"
            placeholder="******"
            {...register('repeatPassword')}
          />
          <p className={styles.errorText}>{errors.repeatPassword?.message}</p>
        </label>

        <div className={styles.signUpLine}></div>

        <label className={styles.signUpLabelCheckbox}>
          <input
            type="checkbox"
            name="agreeCheckbox"
            className={styles.signUpInputCheckbox}
            {...register('agreeCheckbox')}
          />
          –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        </label>
        <p className={styles.errorText}>{errors.agreeCheckbox?.message}</p>

        {errorsFromServer && (
          <>
            {errorsFromServer.email && <p className={styles.errorText}>Email {errorsFromServer.email}</p>}
            {errorsFromServer.username && <p className={styles.errorText}>Username {errorsFromServer.username}</p>}
          </>
        )}

        <button className={styles.signUpButton} type="submit" disabled={!isValid}>
          –°–æ–∑–¥–∞—Ç—å
        </button>

        <div className={styles.signInInfo}>
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
          <NavLink to="/sign-in" className={styles.navLink}>
            –í–æ–π—Ç–∏.
          </NavLink>
        </div>
      </form>
    </div>
  )
}

export default SignUpForm
